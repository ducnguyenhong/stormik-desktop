import { app, BrowserWindow, ipcMain, WebContentsView } from 'electron';
import Store from 'electron-store';
import { v4 as uuidV4 } from 'uuid';
import packageJson from '../package.json';
import { createNewTab } from './function/tab';
import { Tab } from './types/tab.type';
import { HOME_DOMAIN, SHOW_DEVTOOL_STORE_KEY, TABS_STORE_KEY } from './utils/const';
import { addHistory, getDomainName, getLastHistory } from './utils/helper';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const store: any = new Store();

const CONTROL_HEIGHT = 115; // px

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  let currentTabId = '';
  let tabList: any[] = [];

  const mainWindow = new BrowserWindow({
    x: 0,
    y: 0,
    height: 1080,
    width: 1920,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      sandbox: true,
      webviewTag: true
      // contextIsolation: true
    },
    title: `Trình duyệt Stormik - ${packageJson.version}`
  });

  mainWindow.removeMenu();
  mainWindow.maximize();

  const headerView = new WebContentsView({
    webPreferences: {
      // contextIsolation: true,
      // nodeIntegration: true,
      // allowRunningInsecureContent: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });
  const bodyView = new WebContentsView({
    webPreferences: {
      // contextIsolation: true,
      // nodeIntegration: true,
      // allowRunningInsecureContent: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      sandbox: true
    }
  });
  mainWindow.contentView.addChildView(headerView);
  mainWindow.contentView.addChildView(bodyView, 1);

  headerView.setBounds({
    x: 0,
    y: 0,
    width: mainWindow.getContentBounds().width,
    height: CONTROL_HEIGHT
  });
  headerView.webContents.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  bodyView.setBounds({
    x: 0,
    y: CONTROL_HEIGHT,
    width: mainWindow.getContentBounds().width,
    height: mainWindow.getContentBounds().height - CONTROL_HEIGHT
  });

  bodyView.webContents.loadURL(HOME_DOMAIN).then(() => {
    const newTabId = uuidV4();
    store.set(TABS_STORE_KEY, [
      {
        title: 'Thẻ mới',
        url: HOME_DOMAIN,
        id: newTabId,
        isActive: true
      }
    ]);
    currentTabId = newTabId;
    tabList.push({
      id: newTabId,
      view: bodyView,
      index: 0
    });
    headerView.webContents.send('detect-new-tab', newTabId);
  });

  bodyView.webContents.on('will-navigate', (e, url) => {
    // mainWindow.webContents.send('url-change', url);
    // bodyView.webContents.send('url-change', url);
  });

  bodyView.webContents.setWindowOpenHandler((data) => {
    createNewTab(mainWindow, headerView, tabList, store, MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, data.url, (id) => {
      currentTabId = id;
    });
    return { action: 'deny' };
  });

  bodyView.webContents.on('did-navigate', () => {
    addHistory(store, {
      url: bodyView.webContents.getURL(),
      type: 'URL',
      domain: getDomainName(bodyView.webContents.getURL()),
      title: bodyView.webContents.getTitle()
    });
    const oldTabList: Tab[] = store.get(TABS_STORE_KEY) || [];
    const newTabList = oldTabList.map((tab) => {
      if (tab.id === currentTabId) {
        tab.url = bodyView.webContents.getURL();
      }
      return tab;
    });
    store.set(TABS_STORE_KEY, newTabList);
  });

  ipcMain.on('url-enter', (e, data) => {
    bodyView.webContents.loadURL(data);
  });

  ipcMain.on('reload-page', () => {
    bodyView.webContents.reload();
    bodyView.webContents.scrollToTop();
  });

  ipcMain.on('new-tab', () => {
    createNewTab(mainWindow, headerView, tabList, store, MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY, HOME_DOMAIN, (id) => {
      currentTabId = id;
    });
  });

  ipcMain.on('change-tab', (e, tabId: string) => {
    const oldTabList: Tab[] = store.get(TABS_STORE_KEY) || [];
    const currentTab = tabList.find((i) => i.id === tabId);

    if (currentTab) {
      for (let i = 0; i < tabList.length; i++) {
        if (i === currentTab?.index) {
          tabList?.[i].view?.setVisible(true);
        } else {
          tabList?.[i].view?.setVisible(false);
        }
      }
    }

    const tabClicked = oldTabList.find((tab) => tab.id === tabId);
    if (tabClicked?.url) {
      currentTabId = tabClicked?.id;
      const newTabList = oldTabList.map((tab) => {
        if (tab.id === tabId) {
          tab.isActive = true;
        } else {
          tab.isActive = false;
        }
        return tab;
      });
      store.set(TABS_STORE_KEY, newTabList);
    }
  });

  ipcMain.on('close-tab', (e, data: any) => {
    const { id: tabId, isCurrentTab } = data;
    const oldTabList: Tab[] = store.get(TABS_STORE_KEY) || [];
    const currentTabIndex = tabList.findIndex((i) => i.id === tabId);
    if (currentTabIndex) {
      tabList?.[currentTabIndex]?.webContents?.close();
      tabList?.[currentTabIndex].view?.setVisible(false);
    }

    tabList = tabList.filter((i) => i.id !== tabId);

    if (isCurrentTab) {
      for (let i = 0; i < tabList.length; i++) {
        if (i === 0) {
          tabList?.[i].view?.setVisible(true);
        } else {
          tabList?.[i].view?.setVisible(false);
        }
      }
    }
    const newTabList = oldTabList.filter((i) => i.id === tabId);
    store.set(TABS_STORE_KEY, newTabList);
  });

  ipcMain.on('prev-page', () => {
    const lastHistory = getLastHistory(store);
    if (lastHistory?.url) {
      bodyView.webContents.loadURL(lastHistory.url);
    }
  });

  bodyView.webContents.on('devtools-closed', () => {
    const showDevtool = store.get(SHOW_DEVTOOL_STORE_KEY);
    if (showDevtool) {
      store.set(SHOW_DEVTOOL_STORE_KEY, false);
    }
  });

  // Open the DevTools.
  bodyView.webContents.on('before-input-event', (event, input) => {
    if (input.key === 'F12') {
      event.preventDefault();
      const showDevtool = store.get(SHOW_DEVTOOL_STORE_KEY);
      if (showDevtool) {
        store.set(SHOW_DEVTOOL_STORE_KEY, false);
        headerView.webContents.closeDevTools();
      } else {
        store.set(SHOW_DEVTOOL_STORE_KEY, true);
        headerView.webContents.openDevTools();
      }
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
