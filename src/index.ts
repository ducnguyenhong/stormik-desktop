import { app, BrowserWindow, ipcMain, WebContentsView } from 'electron';
import Store from 'electron-store';
import { HOME_DOMAIN, SHOW_DEVTOOL_STORE_KEY } from './utils/const';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const store: any = new Store();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    x: 0,
    y: 0,
    height: 1080,
    width: 1920,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    },
    title: 'Trình duyệt Stormik'
  });

  mainWindow.removeMenu();
  mainWindow.maximize();

  const headerView = new WebContentsView({
    webPreferences: {
      // contextIsolation: false,
      // nodeIntegration: true,
      // allowRunningInsecureContent: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });
  const bodyView = new WebContentsView({
    webPreferences: {
      // contextIsolation: false,
      // nodeIntegration: true,
      // allowRunningInsecureContent: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });
  mainWindow.contentView.addChildView(headerView);
  mainWindow.contentView.addChildView(bodyView);

  headerView.setBounds({
    x: 0,
    y: 0,
    width: mainWindow.getContentBounds().width,
    height: 75
  });
  headerView.webContents.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  bodyView.setBounds({
    x: 0,
    y: 75,
    width: mainWindow.getContentBounds().width,
    height: mainWindow.getContentBounds().height - 75
  });
  bodyView.webContents.loadURL(HOME_DOMAIN);

  bodyView.webContents.on('will-navigate', (e, url) => {
    console.log('ducnh url', url);
    mainWindow.webContents.send('url-change', url);
    bodyView.webContents.send('url-change', url);

    // mainWindow.webContents.postMessage('abcd', url);

    // addHistory(store, {
    //   url,
    //   type: 'URL',
    //   domain: '',
    //   title: ''
    // })
  });

  bodyView.webContents.on('did-finish-load', () => {
    const bytes = Buffer.from(bodyView.webContents.getTitle(), 'utf8');

    console.log('ducnh123', {
      a: bodyView.webContents.getTitle(),
      b: Buffer.from(bodyView.webContents.getTitle(), 'ascii').toString(),
      c: bodyView.webContents.getURL(),
      d: new TextDecoder('windows-1252').decode(bytes)
    });

    // addHistory(store, {
    //   url,
    //   type: 'URL',
    //   domain: '',
    //   title: ''
    // })
  });

  // mainWindow.webContents.send('url-change', 'url1234');

  // mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  ipcMain.on('url-enter', (e, data) => {
    bodyView.webContents.loadURL(data);
  });

  ipcMain.on('reload', () => {
    bodyView.webContents.reload();
    bodyView.webContents.scrollToTop();
  });

  bodyView.webContents.on('devtools-closed', () => {
    const showDevtool = store.get(SHOW_DEVTOOL_STORE_KEY);
    if (showDevtool) {
      store.set(SHOW_DEVTOOL_STORE_KEY, false);
    }
  });

  // Open the DevTools.
  bodyView.webContents.on('before-input-event', (event, input) => {
    if (input.key === 'F12') {
      event.preventDefault();
      const showDevtool = store.get(SHOW_DEVTOOL_STORE_KEY);
      if (showDevtool) {
        store.set(SHOW_DEVTOOL_STORE_KEY, false);
        bodyView.webContents.closeDevTools();
      } else {
        store.set(SHOW_DEVTOOL_STORE_KEY, true);
        bodyView.webContents.openDevTools();
      }
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
